'number' + 3 + 3
/*
Результат - 'number33'
Пояснення -  об'єднання (конкатинація) 2х різних типів даних. Перший тип данних - рядок, до нього приєднується за допомогою символа "+" чисельне значення 3. Результат буде number3. Потім до рядка number3 ще приєднали чисельне значення 3. І фінальний результат буде number33. Без ніяких арифметичних операцій. Два різних типи даних (чисельне і рядок) в результаті конкатинації дадуть тип даних рядок
*/

null + 3
/*
Результат - 3
Пояснення - Тут виконається арефметична операція додавання. У виразі використано 2 типи даних - примітивний тип даних, що у мові js трактується як відсутність значення або 0 - і чисельний тип даних. Тому в результаті це буде аналогічно до виразу 0+3, тобто 3
*/

5 && "qwerty"
/*
Результат - 'qwerty'
Пояснення - Тут використовується логічна операція І та 2 типи даних - чисельний і рядок. В такому випадку оператор І порівнює ліву і праву частини на визначення true чи false. Обидва значення є правдивими, такими що можуть існувати, тому і ліва, і права частина - це у розумінні js true. Якщо під час логічної операції обидві частини правдиві, то js повертає те значення, що розтаовано справа, тобто рядок qwerty
*/

+'40' + +'2' + "hillel";
/*
Результат - '42hillel'
Пояснення - Всі три елементи тут виступають як 1 тип даних - рядок. Проте символ + виступає у різних типах операцій - як додавання, і як об'єднання. Спочатку іде операція над двома рядками - '40' і '2'. За допомогою символа + перед кожним значенням ці два дядкові типи даних перетворюються у чисельні як 40 і 2. Символ + між ними, що залишився виконується як арифметична операція додавання, тобто 40+2 і отримуємо 42. Після цього у нас залишається символ + і рядок hillel. Так як це різні типи даних - чисельне і рядкове, то символ + тут інтерпретується як об'єдання двох значень, тобто 42hillel
*/

'10' - 5 === 6;
/*
Результат - false
Пояснення - тут відбувається порівння правої і лівої частини виразу за допомогою оператора строгої рівності ===. Ліва частина '10' - 5 містить 2 типи даних - рядок і число - і арифметичний оператор віднімання. JS рядок '10' може конвертувати у чисельне значення, тому конвертує його і тут бачимо просто процес віднімання між 1 типом даних - чисельним. У лівій частини виразу отримуємо 5. Права частина виразу містить число 6. Оператор строгої рівності каже, що 5 не рівно 6, тому повертає false
*/


true + false
/*
Результат - 1
Пояснення - в даному виразі 1 тип даних - булеан, який трактує true як 1 і false як 0. Оператор + тут є як арифметичний оператор додавання між 1 (true) і 0 (false)
*/

'4px' - 3
/*
Результат - NaN (Not-a-Number)
Пояснення - тут 2 типи даних - рядок і число і оператор віднімання. JS намагається конвертувати рядок 4px у число, але не може це зробити, тому вже на цьому етапі повертається помилка користувачу NaN, і далі обчислень не відбувається (типу віднімання числа 3)
*/

'4' - 3
/*
Результат - 1
Пояснення - маємо 2 типи даних - рядок і число - арифметичний оператор віднімання. JS намагається конвертувати рядок '4' у число і це проходить успішно, тому надалі проходить віднімання 3, і отримаємо результат 1.
*/

'6' + 3 ** 0;
/*
Результат - '61'
Пояснення - тут маємо 2 операції об'єдання і переведення числа у ступінь і 2 типи даних - рядок і число. Спочатку відбувається операція переведення у ступінь числа 3. Ступінь - 0. Будь-яку число у 0-ій ступені буде 1. Потім число 1 об'єднується з рядком '6'
*/


12 / '6'
/*
Результат - 2
Пояснення - тут 2 типи даних - число і рядок - та арифметичний оператор ділення числа. Так як вираз містить арифметичний оператор js намагається конвертувати рядок '6' у число 6. Це проходить успішно, без помилок, і тоді виконується арифметична операція поділу 2х чисел
*/


'10' + (5 === 6);
/*
Результат - '10false'
Пояснення - Тут маємо 2 типи даних рядок і 2 значення з типом даних число та 2 оператори - об'єднання і строге порівняння. Спочатку виконується дія у дужках - порівняння двох чисельних значень, де 5 не дорівнює 6, в цьому випадку повертається false. Потім іде об'єдання булеан типу і рядкового у рядковий 
*/


null == ''
/*
Результат - true
Пояснення - тут маємо значення null і рядок і оператор рівності (не строге порівняння). Рядок є пустий, що по суті є null. І при порівнянні лівої і правої частити - вони будуть рівні
*/

3 ** (9 / 3);
/*
Результат - 27
Пояснення - тут маємо арифметичні операції над числами. На порядок дій впливають дужки - тут буде перша операція. 9 ділимо на 3 і отримуємо 3. Далі іде введення у ступінь 3 числа 3.
*/

!!'false' == !!'true'
/*
Результат - true
Пояснення - тут маємо 2 значення з типом рядок і 3 операції - не строгого порівняння та двічі операції подвійного заперечення. Ліва і права частини - це рядки. До цих двох рядків приміняються подвійне заперечення, щодо двох рядків. Ці рядкові типи даних містять значення, вони не пусті тому обидві частини будуть true. І так як обидві частини однакові, то результат порівння буде також true
*/

0 || '0' && 1
/*
Результат - 1
Пояснення - 2 логічних оператори і 2 порівняння. Першим буде виконано логічний оператор І і буде порівнюватися рядок '0' (ліва частина) з числом 1 (права частина).0Обидві сторони є правдою, такими що можуть існувати, тому обидві сторони тут будуть true. Так як обидві сторони true, то ця частина далі буде працювати зі значенням правої частини, тобто 1. Далі іде логічне порівння між 0 (числом) і результатом логічного порівняння у першій ітерації, тобто 1. В цьому випадку іде порівняння частин false (0) і true (1) зі значенням або. Якщо перший оператор порівняння false, то повернеться другий оператор, який за значенням є 1
*/


(+null == false) < 1;
/*
Результат - false
Пояснення - тут виконується 3 операції - конвертування типу даних і 2 порівняння. Перща дія відбувається у дужках. Спочатку тип даних null конвертується у число 0. Потім іде не строге порівння лівої (конвертований 0) і правої частини  false. Значення false є 0 тому порівнюючи ліву і праву частину отримаємо true, бо 0=0. Далі іде останне порівняння true < 1. True конвертується у 1 і отримаємо вираз 1<1, що є неправдою, тому фінальний результат буде false
*/

false && true || true
/*
Результат - true
Пояснення - 2 оператори порівняння між буленіськими типами даних. Спочатку буде логічне порівняння з типом І. false && true - перше логічне порівняння. Ліва частина порівняння false, тому весь вираз буде false. Далі іде логічне порівння  АБО false || true. Дане порівннян поверне true
*/

false && (false || true);
/*
Результат - false
Пояснення - перша операція у дужках логічне порівняння типу АБО false || true поверне true. Далі буде логічне порівняння І false && true - поверне false
*/

(+null == false) < 1 ** 5;
/*
Результат - false
Пояснення - перша операція у дужках - порівння і конвертація у інший тип. +null перейде у 0. Далі іде порівняння 0 == false (тоюто false == false, що є true). Значення true конвертуємо у чисельне значення 1. Далі арифметична операція операнда справа - 1 переводимо у 5 ступінь, що буде 1. Далі порівнюємо отримані результати зліва і справа 1 < 1, що є неправдою, тобто false
*/